{
  "openapi": "3.0.1",
  "info": {
    "title": "Payments API",
    "description": "## Introduction\r\n\r\nThis ***301Pay Payments API*** allows to create and retrieve ***payments*** inside the [BKN301 Pay](https://www.bkn301.sm/) platform.<br/>\r\nIt is organized around ***REST*** and ***JSON*** specifications and can be used in test mode with no impact on production data.<br/>\r\nIf you have been granted access to the server to server endpoint, you can also use the API to directly create and authorize ***charges***.\r\n\r\n## Authentication\r\n\r\nTo authenticate with the API, you must pass in 2 headers:<br/>\r\n\r\n| Header          | Description                        |\r\n|-----------------|------------------------------------|\r\n| x-SubmerchantId | your Submerchant unique identifier |\r\n| x-ApiKey        | your API key                       |\r\n\r\nboth these values can be retrieved/generated in your dashboard.\r\n\r\n## Live Mode\r\n\r\nMost of the API calls can be used in test mode, which means that your production data will not be impacted and the transaction will be executed against tests accounts.\r\nTo switch to live mode, upon successful completion of the onboarding in the 301Pay platform, you must pass in the following header:\r\n\r\n| Header     | Description |\r\n|------------|-------------|\r\n| x-LiveMode | true        |\r\n\r\n## Test Cards\r\n\r\nTo test payments via cards, you can use the following cards details:<br/>\r\n\r\n|   Card Number    | Expiry Date | CVV | Brand  |   3D-Secure   | Result  |\r\n|:----------------:|:-----------:|:---:|:------:|:-------------:|:-------:|\r\n| 5186190250001017 |   12/2025   | 283 | MC     |      V1/V2    | Succeed |\r\n| 5351479989003330 |   12/2025   | 399 | MC     |      V1/V2    | Decline |\r\n| 4300002100000012 |   12/2025   | 626 | VISA   |      V1/V2    | Succeed |\r\n| 5530826700000009 |   12/2025   | 123 | MC     |      V1/V2    | Succeed |\r\n| 4005529320030039 |   12/2025   | 123 | VISA   |      V1/V2    | Decline |\r\n| 5346933300108119 |   12/2025   | 874 | MC     |      V1/V2    | Decline |\r\n| 6210946888060008 |   10/2030   | --- | UPI    |      V1/V2    | Succeed |\r\n\r\n\r\n\r\n## Subscriptions\r\n\r\nWith Subscriptions, customers make recurring payments to access a product or service. This feature requires the system to retain more customer information, as they'll be charged multiple times over the subscription's duration.<br/>\r\nA subscription links a customer to a specific plan you've created, enabling recurring charges. \r\nWhen setting up a subscription, you define the billing schedule and may also specify a trial period. The process to establish a subscription follows these steps:\r\n\r\n### Step 1: Create a subscription\r\nDefine the subscription using [POST subscription](#tag/Subscriptions/paths/~1api~11.0~1subscriptions/post). his step sets up the essential parameters of your offering, including the subscription name, amount, frequency, internal reference (for reconciliation purposes), and an optional trial period. This endpoint returns a SubscriptionId, needed in Step 3.<br/>\r\n\r\n### Step 2: Create a Customer\r\nUse [POST customers](#tag/Customers/paths/~1api~11.0~1customers/post) to create a customer profile, which acts as a container for customer data and associated payment methods. You can input identifiers such as full name, phone number, and email. This endpoint returns a CustomerId, required in Step 3.<br/>\r\n\r\n### Step 3: Create a subscriber\r\nCreate a subscriber [POST subscribers](#tag/Subscribers/paths/~1api~11.0~1subscribers/post), establishing the relationship between a subscription (SubscriptionId), customer (CustomerId), and the chosen payment method. Once a subscriber is created, you'll receive a link to redirect your customer for payment setup and a SubscriberId.<br/>\r\n\r\n### Callbacks\r\nTo receive updates on payment outcomes, merchants can use webhooks. After a customer enrolls in a subscription plan, the merchant receives a POST notification for each \"PaymentSucceeded\" or \"PaymentFailed\" attempt.<br/>\r\nA successful subscription generates two notifications:\r\n1. An initial notification with a $0.00 amount, confirming the payment setup for the subscriber.\r\n2. A subsequent notification with the actual subscription amount. For subscriptions with a trial period, this payment notification will be sent once the trial ends.\r\n\r\n### Subscription Management\r\nCustomers can decide to cancel their subscription at any time. Merchants have two options to ensure a prompt response to its customer request:\r\n- To implement an unsubscribe flow using the [PUT subscribers](#tag/Subscribers/paths/~1api~11.0~1subscribers~1%7BsubscriberId%7D/put) and updating the Status to \"canceled\". This will stop future recurring charges for the specific subscriber.\r\n- To manage cancellations through the 301pay UI. The merchant will select the Subscription and the Subscriber within it that needs to be \"cancelled\".\r\n\r\nOn top of that, Subscriptions can be deactivated via the 301pay UI to prevent new Subscribers from joining.\r\n\r\n\r\n## Payment Configurations\r\n\r\nA submerchant may have multiple payment methods, and each payment method can use different configurations.<br/>\r\nTo get the available payment methods, you can [GET account](#tag/Account/paths/~1api~11.0~1account/get).<br/>\r\nThen to obtain all the configurations of a specific payment method, you can [GET paymentConfigurations](#tag/Account/paths/~1api~11.0~1account~1configurations~1%7BpaymentMethod%7D/get).<br/>\r\nTo active a particular payment configuration, you can [PUT paymentConfiguration](#tag/Account/paths/~1api~11.0~1account~1configurations~1%7BpaymentMethod%7D~1%7BconfigurationId%7D~1active/put), passing the paymentMethodId and the configurationId (retrieved from the previous requests). <br/>\r\nAt any time it is possible to activate a specific payment configuration, and the system will immediately start using it.<br/>\r\nPlease notice that there can be only one active configuration for each payment method.<br/>\r\n\r\n\r\n## Server to Server\r\n\r\nThe server to server endpoint can be used to directly create and authorize charges, thus bypassing the BKN301 Pay payment application.<br/>\r\nThe flow to complete a payment involves multiple steps and API calls.<br />\r\n\r\n### Payment flow\r\n\r\nIf you want to give your customers the possibility to tokenize the card and reuse it for following transactions, you will need to create a new customer [POST customers](#tag/Customers/paths/~1api~11.0~1customers/post).\r\nThis is a facultative step.<br/>\r\n\r\n#### Step 1: Create a payment\r\n\r\nThe first step is to create a payment [POST payments](#tag/Payments/paths/~1api~11.0~1payments/post).<br/>\r\nIt is not necessary to pass in the 'returnUrls' object, as there won't be any redirection to the payment application.<br/>\r\nBy passing the id of a customer previously created into the 'customerId' property, you will be able to eventually save the payment method for that customer,\r\nor to reuse previous saved payment methods.<br/>\r\n\r\n#### Step 2: Create a new charge\r\n\r\nCreate a new charge [POST charges](#tag/Charges/paths/~1api~1s2s~11.0~1nets~1charges/post).<br/>\r\nThe response object will contain the unique identifier of the charge, which will be needed to authorize the charge and the encryption key.<br/>\r\n\r\n#### Step 3: Issue an authorization request\r\n\r\nPost an authorization request [POST charges/{chargeId}/authorizations](#tag/Charges/paths/~1api~1s2s~11.0~1nets~1charges~1{chargeId}~1authorizations/post).\r\nThe request object must contain one of the following properties:\r\n- the card to authorize. The card number and security code (CVV) are encrypted using the encryption key from the previous step, by using an RSA PKCS #1 algorithm\r\n- the paymentMethodId of the customer specified in step 1\r\n\r\nand also:<br/>\r\n\r\n- the 'gdiNotifyUrl', which will be called when the 3DS flow is triggered and the bank has finished identifying the user browser<br/>\r\n- the 'authNotifyUrl', which will be called when the 3DS flow is triggered and the authentication has completed<br/>\r\n\r\nIf you wish to save the payment method and associate it to the customer, the 'savePaymentMethod' property must be set to true.\r\nIn case the same payment method already exists, it will get overwritten.<br/>\r\n\r\nThe result of the call may vary depending on the card used and if the card is enrolled in 3DS or not (see the section <b>Card not enrolled/enrolled in 3ds</b>).\r\n\r\n### Card not enrolled in 3DS\r\n\r\nThe response from the authorization request will contain the status of the authorization and both the 'success' and 'completed' fields will be true.<br/>\r\nIn case the transaction has been declined, the field 'gatewayCode' will contain the reason for the decline.\r\n\r\n### Card enrolled in 3DS\r\n\r\nThe response from the authorization request will have 'success' set to true and 'completed' set to false.<br/>\r\nIn this case the 'iframe' object will contain the url that must be opened in an iframe, plus an indication if the iframe must be hidden or visible to the user.\r\nThe hidden iframe is used to open the GDI flow which is similar to an assessment of the user browser, while the visible iframe is used to open the authentication flow.\r\nN.B. You will need to issue the authorization request multiple times, until the 'completed' field is set to true or the 'success' field is set to false, thus indicating that either the authentication or transaction operation have failed.\r\n\r\n### Gateway error codes\r\n| Code           | Description                                        |\r\n|----------------|----------------------------------------------------|\r\n| IGFS_000       | Transazione Autorizzata                            |\r\n| IGFS_001       | DESTINATARIO SCONOSCIUTO                           |\r\n| IGFS_00155     | BATCH TRACK ID NON VALIDO.                         |\r\n| IGFS_00156     | BATCH TRACK ID NON UNIVOCO                         |\r\n| IGFS_00157     | STRUMENTO PAGAMENTO NON VALIDO.                    |\r\n| IGFS_00158     | NUMERO CARTA NON NUMERICO                          |\r\n| IGFS_00159     | NUMERO CARTA NON PRESENTE                          |\r\n| IGFS_002       | CARTA SCADUTA                                      |\r\n| IGFS_00202     | TENTATIVO HACK RILEVATO                            |\r\n| IGFS_00203     | ACCESSO NON VALIDO :ULITIZZARE METODO POST         |\r\n| IGFS_00253     | MAXIMUM CREDIT VOLUME EXCEEDED.                    |\r\n| IGFS_00254     | MAXIMUM CARD DEBIT VOLUME EXCEEDED.                |\r\n| IGFS_00255     | MAXIMUM CARD CREDIT VOLUME EXCEEDED.               |\r\n| IGFS_00256     | MAXIMUM CARD TRANSACTION COUNT EXCEEDED.           |\r\n| IGFS_00257     | MAXIMUM TRANSACTION AMOUNT EXCEEDED.               |\r\n| IGFS_00260     | TRANSACTION DENIED: CREDITS EXCEED CAPTURES        |\r\n| IGFS_00261     | TRANSACTION DENIED: CAPTURES EXCEED AUTHORIZATIONS |\r\n| IGFS_00262     | TRANSAZIONE SCADUTA                                |\r\n| IGFS_003       | CARTA ERRATA                                       |\r\n| IGFS_00300     | INSTITUTION ID NON PRESENTE.                       |\r\n| IGFS_00301     | RISK PROFILE ID NON PRESENTE.                      |\r\n| IGFS_00302     | CODICE VALUTA NON PRESENTE.                        |\r\n| IGFS_004       | CARTA IN BLACK LIST - RITIRARE                     |\r\n| IGFS_00451     | MERCHANT ID NON PRESENTE.                          |\r\n| IGFS_00452     | TERMINAL ID NON PRESENTE.                          |\r\n| IGFS_00453     | TERMINAL ID NON PRESENTE.                          |\r\n| IGFS_00454     | TERMINAL ID NON VALIDO                             |\r\n| IGFS_00456     | TERMINAL ID NON VALIDO                             |\r\n| IGFS_005       | ERRORE DI FORMATO                                  |\r\n| IGFS_006       | ERRORE FILE SYSTEM                                 |\r\n| IGFS_007       | ERRORE DI COMUNICAZIONE                            |\r\n| IGFS_00701     | IL BATCH NON PROCESSATO                            |\r\n| IGFS_00702     | IL BATCH NON RIAVVIATO                             |\r\n| IGFS_00704     | BATCH ID NON NUMERICO                              |\r\n| IGFS_00705     | BATCH ID NON PRESENTE                              |\r\n| IGFS_008       | AUTORIZZAZIONE NEGATA                              |\r\n| IGFS_009       | RITIRARE CARTA                                     |\r\n| IGFS_00950     | DIRECTORY BATCH UPLOAD NON PRESENTE                |\r\n| IGFS_00951     | DIRECTORY BATCH DOWNLOAD NON PRESENTE              |\r\n| IGFS_00952     | NOME DIRECTORY ARCHIVIAZIONE BATCH NON PRESENTE    |\r\n| IGFS_010       | MERCHANT NON ABILITATO                             |\r\n| IGFS_01000     | TRANSAZIONE NEGATA DAL RISCHIO                     |\r\n| IGFS_011       | CONTATTARE ACQUIRER                                |\r\n| IGFS_014       | MERCHANT NON CONVENZIONATO                         |\r\n| IGFS_015       | CARTA NON GESTITA                                  |\r\n| IGFS_016       | CARTA IN RANGE NEGATIVO O STRANIERA                |\r\n| IGFS_018       | CARTA INESISTENTE                                  |\r\n| IGFS_020       | CARTA INVALIDA                                     |\r\n| IGFS_021       | CODICE MERCHANT ERRATO                             |\r\n| IGFS_029       | DATA SCADENZA ERRATA                               |\r\n| IGFS_030       | FONDI INSUFFICIENTI                                |\r\n| IGFS_03100     | CONFERME E CREDITI MULTIPLI NON ABILITATI          |\r\n| IGFS_032       | IMPORTO NON VALIDO                                 |\r\n| IGFS_03200     | CONFERME E CREDITI PARZIALI NON ABILITATI          |\r\n| IGFS_033       | TRANSAZIONE ORIGINALE NON TROVATA                  |\r\n| IGFS_04000     | URL EXPIRED                                        |\r\n| IGFS_04001     | MAXIMUM ATTEMPTS                                   |\r\n| IGFS_04002     | ERROR SENDING PAYMENT URL                          |\r\n| IGFS_083       | ERRORE CIFRATURA TRANSAZIONE                       |\r\n| IGFS_085       | CODICE DIVISA ERRATO                               |\r\n| IGFS_086       | MALFUNZIONAMENTO SISTEMA                           |\r\n| IGFS_087       | ACQUIRER NON RAGGIUNGIBILE                         |\r\n| IGFS_088       | MANCATA RISPOSTA DA ACQUIRER                       |\r\n| IGFS_089       | PAYMENT INSTRUMENT ERROR                           |\r\n| IGFS_091       | MALFUNZIONAMENTO SISTEMA ACQUIRER                  |\r\n| IGFS_092       | TRANSAZIONE SCONOSCIUTA                            |\r\n| IGFS_093       | CONFERMA GIA' PRESENTE                             |\r\n| IGFS_094       | CREDITO GIA' PRESENTE                              |\r\n| IGFS_095       | STORNO PER NOTIFICA INESISTENTE                    |\r\n| IGFS_096       | STORNO PER AUTORIZZAZIONE INESISTENTE              |\r\n| IGFS_097       | CONFERMA PER AUTORIZZAZIONE INESISTENTE            |\r\n| IGFS_098       | IMPORTO SUPERIORE AD IMPORTO AUTORIZZATO           |\r\n| IGFS_099       | STORNO GIA' PRESENTE                               |\r\n| IGFS_10000     | CARATTERI NON VALIDI                               |\r\n| IGFS_101       | MAC ERRATO                                         |\r\n| IGFS_102       | SOSPETTA FRODE                                     |\r\n| IGFS_104       | CARTA SOGGETTA A RESTRIZIONI                       |\r\n| IGFS_107       | CONTATTARE ISSUER                                  |\r\n| IGFS_108       | CONTATTARE ISSUER :CASO SPECIALE                   |\r\n| IGFS_112       | INSERIRE PIN                                       |\r\n| IGFS_115       | FUNZIONE NON SUPPORTATA SU CARTA                   |\r\n| IGFS_117       | PIN ERRATO                                         |\r\n| IGFS_118       | CONTO NON TROVATO O NON ABILITATO                  |\r\n| IGFS_119       | OPERAZIONE NON PERMESSA AL TITOLARE                |\r\n| IGFS_121       | SUPERATO LIMITE IMPORTO                            |\r\n| IGFS_122       | ERRORE SICUREZZA                                   |\r\n| IGFS_123       | SUPERATO LIMITE FREQUENZA                          |\r\n| IGFS_125       | CARTA NON GESTITA                                  |\r\n| IGFS_129       | SOSPETTA FRODE SU CARTA                            |\r\n| IGFS_160       | CARTA PERSA                                        |\r\n| IGFS_164       | DATA ANTEC. A BLOCCO CARTA                         |\r\n| IGFS_165       | ?                                                  |\r\n| IGFS_172       | ADDITIONAL AUTHENTICATION REQUIRED: SCA REQUIRED   |\r\n| IGFS_180       | DATI ERRATI                                        |\r\n| IGFS_181       | DATI SENSIBILI ERRATI                              |\r\n| IGFS_188       | ?                                                  |\r\n| IGFS_189       | BIN IN RANGE NEGATIVO                              |\r\n| IGFS_1921      | 3DS:UNABLE TO AUTENTICATE                          |\r\n| IGFS_1922      | 3DS:AUTENTICATION ERROR                            |\r\n| IGFS_1923      | 3DS:UNABLE TO VERIFY (VERES=U)                     |\r\n| IGFS_1924      | OTP:AUTENTICATION ERROR                            |\r\n| IGFS_200       | RITIRARE CARTA                                     |\r\n| IGFS_20000     | DATI MANCANTI                                      |\r\n| IGFS_20001     | CODICE AZIONE NON VALIDO                           |\r\n| IGFS_20002     | SESSIONE SCADUTA                                   |\r\n| IGFS_20003     | COOKIES NON ABILITATI                              |\r\n| IGFS_20004     | JAVASCRIPT NON ABILITATO                           |\r\n| IGFS_20006     | BRAND NON VALIDO                                   |\r\n| IGFS_20007     | STATO ORDINE NON VALIDO                            |\r\n| IGFS_20010     | URL INVIO RISPOSTA NON VALIDO                      |\r\n| IGFS_20011     | URL INVIO ERRORE NON VALIDO                        |\r\n| IGFS_20012     | TRACK ID NON VALIDO                                |\r\n| IGFS_20013     | CODICE LINGUA NON VALIDO                           |\r\n| IGFS_20014     | CAMPO UDF NON VALIDO                               |\r\n| IGFS_20015     | NOME CARTA NON VALIDO                              |\r\n| IGFS_20016     | INDIRIZZO NON VALIDO                               |\r\n| IGFS_20017     | CAP NON VALIDO                                     |\r\n| IGFS_20018     | CVV2 NON VALIDO                                    |\r\n| IGFS_20019     | TRANSACTION ID. NON VALIDO                         |\r\n| IGFS_20020     | CAMPO USER IDENTIFIER NON VALIDO                   |\r\n| IGFS_20021     | CAMPO API VERSION NON VALIDO                       |\r\n| IGFS_20022     | CAMPO SIGNATURE NON VALIDO                         |\r\n| IGFS_20023     | CAMPO PAYMENT ID NON VALIDO                        |\r\n| IGFS_20024     | CODICE AUTORIZZAZIONE MANCANTE                     |\r\n| IGFS_20025     | CAMPO REFERENCE DATA NON VALIDO                    |\r\n| IGFS_20026     | SHOP ID DUPLICATO                                  |\r\n| IGFS_20027     | FORMATO RICHIESTA NON VALIDO                       |\r\n| IGFS_20028     | DATI BATCH MANCANTI                                |\r\n| IGFS_20029     | DATI BATCH NON VALIDI                              |\r\n| IGFS_20030     | DIRECTORY DATI BATCH NON VALIDA                    |\r\n| IGFS_20031     | DATI BATCH DUPLICATI                               |\r\n| IGFS_20032     | NOME BATCH FILE NON VALIDO                         |\r\n| IGFS_20033     | DATI BATCH NON TROVATI                             |\r\n| IGFS_20034     | BATCH TRACK ID NON VALIDO                          |\r\n| IGFS_20035     | ORDERID NON VALIDO                                 |\r\n| IGFS_20036     | PAN NON VALIDO                                     |\r\n| IGFS_20037     | CVV2 NON VALIDO                                    |\r\n| IGFS_20038     | EXPIRE DATE NON VALIDA                             |\r\n| IGFS_20040     | MPI VERIFIED NON VALIDA                            |\r\n| IGFS_20041     | MPI AUTHORIZED NON VALIDA                          |\r\n| IGFS_20042     | MPI CAVV NON VALIDA                                |\r\n| IGFS_20043     | MPI XID DATE NON VALIDA                            |\r\n| IGFS_20044     | CAMPO PAYMENT DESCRIPTION NON VALIDO               |\r\n| IGFS_20045     | PAYMENT INSTRUMENT TOKEN ID ERRATO                 |\r\n| IGFS_20046     | FREE TEXT ERRATO                                   |\r\n| IGFS_20047     | HASH PAYMENT INSTRUMENT TOKEN ERRATO               |\r\n| IGFS_20048     | ERRORE PROCESSAMENTO PAYMENT INSTRUMENT TOKEN      |\r\n| IGFS_20049     | TOPUPID ERRATO                                     |\r\n| IGFS_20050     | CODICE POSTALE MITTENTE NON VALIDO                 |\r\n| IGFS_20051     | CODICE POSTALE DESTINATARIO NON VALIDO             |\r\n| IGFS_20052     | CODICE NAZIONE DESTINATARIO NON VALIDO             |\r\n| IGFS_20053     | IMPORTO SPEDIZIONE NON VALIDO                      |\r\n| IGFS_20054     | TELEFONO DESTINATARIO NON VALIDO                   |\r\n| IGFS_20055     | FAX DESTINATARIO NON VALIDO                        |\r\n| IGFS_20056     | IMPORTO TASSE NON VALIDO                           |\r\n| IGFS_20057     | ELENCO ARTICOLI MANCANTE                           |\r\n| IGFS_20058     | CODICE ARTICOLO NON VALIDO                         |\r\n| IGFS_20059     | DESCRIZIONE ARTICOLO NON VALIDO                    |\r\n| IGFS_20060     | NUMERO NON VALIDO                                  |\r\n| IGFS_20061     | TELEFONO FATTURA NON VALIDO                        |\r\n| IGFS_20062     | IMPORTO ARTICOLO NON VALIDO                        |\r\n| IGFS_20064     | FAX FATTURA NON VALIDO                             |\r\n| IGFS_20065     | NUMERO MASSIMO PRODOTTI SUPERATO                   |\r\n| IGFS_20066     | CODICE NAZIONE MITTENTE NON VALIDO                 |\r\n| IGFS_20067     | NOME DESTINATARIO NON VALIDO                       |\r\n| IGFS_20068     | INDIRIZZO DESTINATARIO NON VALIDO                  |\r\n| IGFS_20069     | CITTA DESTINATARIO NON VALIDA                      |\r\n| IGFS_20070     | STATO DESTINATARIO NON VALIDO                      |\r\n| IGFS_20071     | CODICE VAT NON VALIDO                              |\r\n| IGFS_20072     | NOME FATTURA NON VALIDO                            |\r\n| IGFS_20073     | INDIRIZZO FATTURA NON VALIDO                       |\r\n| IGFS_20074     | CITTA FATTURA NON VALIDA                           |\r\n| IGFS_20075     | STATO FATTURA NON VALIDO                           |\r\n| IGFS_20076     | CODICE POSTALE FATTURA NON VALIDO                  |\r\n| IGFS_20077     | CODICE NAZIONE FATTURA NON VALIDO                  |\r\n| IGFS_20078     | NUMERO FATTURA NON VALIDO                          |\r\n| IGFS_20079     | NOTE AL VENDITORE NON VALIDE                       |\r\n| IGFS_20080     | PAGINA DI STILE NON VALIDA                         |\r\n| IGFS_20083     | AUTHCODE ERRATO                                    |\r\n| IGFS_20084     | BUYERNAME ERRATO                                   |\r\n| IGFS_20085     | BUYERACCNT ERRATO                                  |\r\n| IGFS_20086     | IPBUYER ERRATO                                     |\r\n| IGFS_20087     | BOUSER ERRATO                                      |\r\n| IGFS_20090     | TRANSAZIONE CANCELLATA DALL'UTENTE                 |\r\n| IGFS_20092     | BUYERMOBILE ERRATO                                 |\r\n| IGFS_20095     | MIN EXPIRE DATE NON VALIDA                         |\r\n| IGFS_20096     | TOPUPID GIA' AVVIATO                               |\r\n| IGFS_20098     | CAMPO RECURRENT NON VALIDO                         |\r\n| IGFS_20099     | BUYERIMEI ERRATO                                   |\r\n| IGFS_20100     | ERRORE NOTIFICA MERCHANT                           |\r\n| IGFS_208       | CARTA PERSA                                        |\r\n| IGFS_209       | CARTA RUBATA                                       |\r\n| IGFS_400       | STORNO OK                                          |\r\n| IGFS_800       | TERMINALE NON ABILITATO                            |\r\n| IGFS_801       | BANCA SELEZIONATA ERRATA                           |\r\n| IGFS_802       | TENTATIVI PIN ESAURITI                             |\r\n| IGFS_803       | CODICE TERMINALE ERRATO                            |\r\n| IGFS_804       | CHIAVE DISALLINEATA                                |\r\n| IGFS_805       | ERRORE CIFRATURA                                   |\r\n| IGFS_807       | TERMINALE CHIUSO                                   |\r\n| IGFS_808       | TERMINALE NON CHIUSO                               |\r\n| IGFS_809       | ERRORE SEQUENZA                                    |\r\n| IGFS_810       | TERMINALE NON RICONOSCIUTO                         |\r\n| IGFS_811       | TERMINALE BLOCCATO                                 |\r\n| IGFS_812       | TERMINALE CHIUSO FORZ.                             |\r\n| IGFS_813       | OPERAZIONE NON PERMESSA                            |\r\n| IGFS_814       | TRANSAZIONE IN CORSO                               |\r\n| IGFS_815       | CARTA BLOCCATA                                     |\r\n| IGFS_888       | IN ATTESA DI COMPLETAMENTO                         |\r\n| IGFS_90000     | DATABASE ERROR                                     |\r\n| IGFS_90005     | TIMESTAMP ERRATO.                                  |\r\n| IGFS_902       | TRANSAZIONE NON VALIDA                             |\r\n| IGFS_903       | REINVIARE TRANSAZIONE                              |\r\n| IGFS_907       | EMITTENTE NON ADERENTE                             |\r\n| IGFS_908       | DESTINAZIONE NON TROVATA                           |\r\n| IGFS_909       | ERRORE DI SISTEMA                                  |\r\n| IGFS_910       | SISTEMA ISSUER NON ATTIVO                          |\r\n| IGFS_911       | TIME OUT                                           |\r\n| IGFS_912       | ISSUER NON RAGGIUNGIBILE                           |\r\n| IGFS_913       | TRANSAZIONE DUPLICATA                              |\r\n| IGFS_934       | NOTIFICA RIFIUTATA                                 |\r\n| IGFS_990       | STRUMENTO PAGAMENTO NON ATTIVO                     |\r\n| IGFS_BPIOL_999 | CONTO BPIOL ERRATO                                 |\r\n| IGFS_BPOL_999  | CONTO BPOL ERRATO                                  |\r\n| IGFS_PPAY_999  | CONTO PPAY ERRATO                                  |\r\n| IGFS_PPAYI_999 | CONTO PPAYI ERRATO                                 |\r\n\r\n## Webhooks\r\nWebhooks allow you to receive an HTTP callbacks sent to your endpoints.\r\nYou can define up to 10 endpoints via the [dashboard](https://www.301pay.sm/).\r\nEvery callback is sent as a POST request with a JSON body.\r\n\r\n### Timeout, retries and idempotency\r\nA callback has a timeout of 30 seconds, so your system should process the request in a timely manner or, better, asynchronously.\r\nIn some occasions, the same callback may be sent multiple times, so your system should be idempotent.\r\n\r\nA callback is considered successful if it returns a 2xx HTTP status code.\r\n\r\nEvery callback will be attempted 10 times, with an exponential backoff configured as 60 seconds + number of attempts ^ 4, like in the following schema:\r\n\r\n| Attempt | Retry after (approx.) |\r\n|--------:|----------------------:|\r\n|       1 |                     - |\r\n|       2 |            60 seconds |\r\n|       3 |           136 seconds |\r\n|       4 |           277 seconds |\r\n|       5 |           593 seconds |\r\n|       6 |          1278 seconds |\r\n|       7 |          2634 seconds |\r\n|       8 |          5461 seconds |\r\n|       9 |         11264 seconds |\r\n|      10 |         23040 seconds |\r\n\r\n### Anatomy of an event\r\n```http request\r\nPOST / HTTP/1.1\r\nHost: http.outmatic.dev\r\nContent-Length: 103\r\nContent-Type: application/json; charset=utf-8\r\nX-Event-Version: 1.0\r\nX-Event-Signatures: z5c0Vubo/bRQdpouMSJQZjrEIEA2xq/z1QSBgA04YkA=\r\n\r\n{\"id\":\"someId\",\"eventType\":\"PaymentSucceeded\",\"eventDate\":\"2023-03-24T09:53:38.744583+01:00\",\"eventData\":{\"paymentId\":\"someId\",\"reference\":\"some external identifier\",\"currency\":\"EUR\",\"amount\":10.000}}<br/>\r\n```\r\n\r\n#### Event Signatures\r\nTo verify that every event is sent by 301pay, you can use the event signatures.\r\nEvery POST will contain a header (X-Event-Signatures) that contains one or more signatures, calculated as follows:\r\n- SHA256 (raw) of the POST body content\r\n- The raw output of the SHA256 must be converted to base64\r\n- HMAC (raw) of the hash using the key provided during the endpoint creation\r\n- The raw output of the HMAC must be converted to base64\r\n\r\nIf the signature you obtain is equal to one of those present in the header, you can be sure that the event is sent by 301pay.\r\n\r\n#### Event versioning\r\nThe header X-Event-Version contains the version of the event payload.\r\n\r\n#### Event structure\r\nEvery event has the following structure, where the eventData field contains the payload of the event:\r\n\r\n```json\r\n{\r\n  \"id\": \"ae3234324\", // event identifier\r\n  \"eventType\": \"PaymentSucceeded\", // type of the event\r\n  \"eventDate\": \"2023-03-24T09:53:38.744583+01:00\",\r\n  \"eventData\": { // payload of the event\r\n    \"somedata\": \"somevalue\"\r\n    ...\r\n  }\r\n}\r\n```\r\n\r\n### Event types\r\n#### PaymentSucceeded\r\nOccurs when a payment has been completed successfully.\r\n```json\r\n{\r\n  \"paymentId\": \"123456\",\r\n  \"reference\": \"some external identifier\",\r\n  \"currency\": \"EUR\",\r\n  \"amount\": 10.000\r\n}\r\n```\r\n#### PaymentFailed\r\nOccurs when a payment has been failed.\r\n```json\r\n{\r\n  \"paymentId\": \"123456\",\r\n  \"reference\": \"some external identifier\",\r\n  \"currency\": \"EUR\",\r\n  \"amount\": 10.000\r\n}\r\n```\r\n\r\n",
    "version": "1.0",
    "x-logo": {
      "url": "/images/301pay.svg",
      "altText": "301pay"
    }
  },
  "paths": {
    "/api/1.0/account": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieves information about the account",
        "description": "Retrieves all the information about the submerchant account, like payment methods, supported currencies, etc.",
        "parameters": [
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.GetSubmerchantAccount_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.GetSubmerchantAccount_Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/account/configurations/{paymentMethod}/{configurationId}/active": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Activete a payment configuration",
        "description": "Activete a payment configuration",
        "parameters": [
          {
            "name": "configurationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethod",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/account/configurations/{paymentMethod}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Gets available payment configurations",
        "description": "Gets available payment configurations",
        "parameters": [
          {
            "name": "paymentMethod",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Queries.GetPaymentMethods_Result"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Queries.GetPaymentMethods_Result"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/s2s/1.0/nets/charges": {
      "post": {
        "tags": [
          "Charges"
        ],
        "summary": "Creates a s2s charge",
        "description": "Creates and initialize a new s2s charge.\r\n            If a valid configurationId (the unique identifier of payment configuration) is valorized with an existing payment configuration of the merchant, \r\n            the charge will be authorized with this configuration.\r\n            Otherwise, the charge will be authorized with the merchant active configuration at that moment.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Nets.CreateS2SCharge_Request"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Nets.CreateS2SCharge_Request"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Nets.CreateS2SCharge_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nets.CreateS2SCharge_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nets.CreateS2SCharge_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/s2s/1.0/nets/charges/{chargeId}/authorizations": {
      "post": {
        "tags": [
          "Charges"
        ],
        "summary": "Authorizes a s2s charge",
        "description": "Authorize a s2s charge.\r\n            If the charge does not require an authorization flow, it gets immediately authorized (or declined),\r\n            otherwise the response will contain the indications for the authentication flow (e.g. in case of 3D-Secure).",
        "parameters": [
          {
            "name": "x-UserAgent",
            "in": "header",
            "description": "Description of the user browser.",
            "schema": {
              "title": "UserAgent",
              "type": "string",
              "description": "Description of the user browser.",
              "format": "string"
            }
          },
          {
            "name": "x-UserIp",
            "in": "header",
            "description": "User IP address.",
            "schema": {
              "title": "UserIp",
              "type": "string",
              "description": "User IP address.",
              "format": "string"
            }
          },
          {
            "name": "chargeId",
            "in": "path",
            "description": "The unique identifier of the charge.",
            "required": true,
            "schema": {
              "title": "Charge Id",
              "type": "string",
              "description": "The unique identifier of the charge.",
              "format": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Nets.AuthorizeS2SCharge_Request_BodyDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Nets.AuthorizeS2SCharge_Request_BodyDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Nets.AuthorizeS2SCharge_Request_BodyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nets.AuthorizeS2SCharge_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Nets.AuthorizeS2SCharge_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/customers": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Creates a customer",
        "description": "Creates a customer.",
        "parameters": [
          {
            "name": "x-PreferredLanguage",
            "in": "header",
            "description": "The language code (ISO 639-1, two-letter) to use for customer notifications. If not specified, the default language 'it' is used.",
            "schema": {
              "title": "Language",
              "type": "string",
              "description": "The language code (ISO 639-1, two-letter) to use for customer notifications. If not specified, the default language 'it' is used.",
              "format": "iso-639-1"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The customer payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreateCustomer_Request_Body"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreateCustomer_Request_Body"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreateCustomer_Request_Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Commands.CreateCustomer_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Commands.CreateCustomer_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Gets the list of customers",
        "description": "Gets the list of customers",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return. The default is 10.",
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "The maximum number of results to return. The default is 10.",
              "format": "string"
            }
          },
          {
            "name": "startingAfterId",
            "in": "query",
            "description": "The id of the first item in the current page of the list, used for scrolling forward.",
            "schema": {
              "title": "StartingAfterId",
              "type": "string",
              "description": "The id of the first item in the current page of the list, used for scrolling forward.",
              "format": "string"
            }
          },
          {
            "name": "endingBeforeId",
            "in": "query",
            "description": "The id of the last item in the current page of the list, used for navigating backward..",
            "schema": {
              "title": "EndingBeforeId",
              "type": "string",
              "description": "The id of the last item in the current page of the list, used for navigating backward..",
              "format": "string"
            }
          },
          {
            "name": "emailAddress",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fullName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mobileNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.SearchCustomers_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.SearchCustomers_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/customers/{customerId}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Gets a customer",
        "description": "Gets a customer.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The unique identifier of the customer to retrieve",
            "required": true,
            "schema": {
              "title": "Customer Id",
              "type": "string",
              "description": "The unique identifier of the customer to retrieve",
              "format": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Customer"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Customer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/customers/{customerId}/paymentmethods": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Gets paymentMethods",
        "description": "Gets a payment method.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The unique identifier of the customer to retrieve",
            "required": true,
            "schema": {
              "title": "Customer Id",
              "type": "string",
              "description": "The unique identifier of the customer to retrieve",
              "format": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Queries.GetCustomerPaymentMethods_Result"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Queries.GetCustomerPaymentMethods_Result"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/customers/{customerId}/paymentmethods/{paymentMethodId}": {
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Delete paymentMethods",
        "description": "Delete a payment method.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The unique identifier of the customer to retrieve",
            "required": true,
            "schema": {
              "title": "Customer Id",
              "type": "string",
              "description": "The unique identifier of the customer to retrieve",
              "format": "string"
            }
          },
          {
            "name": "paymentMethodId",
            "in": "path",
            "description": "The unique identifier of the paymentMethodId of the customer to retrieve",
            "required": true,
            "schema": {
              "title": "PaymentMethod Id",
              "type": "string",
              "description": "The unique identifier of the paymentMethodId of the customer to retrieve",
              "format": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/disputes": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Retrieves a list of disputes",
        "description": "Retrieves a list of disputes.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return. The default is 10.",
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "The maximum number of results to return. The default is 10.",
              "format": "string"
            }
          },
          {
            "name": "startingAfterId",
            "in": "query",
            "description": "The id of the first item in the current page of the list.",
            "schema": {
              "title": "StartingAfterId",
              "type": "string",
              "description": "The id of the first item in the current page of the list.",
              "format": "string"
            }
          },
          {
            "name": "endingBeforeId",
            "in": "query",
            "description": "The id of the last item in the current page of the list.",
            "schema": {
              "title": "EndingBeforeId",
              "type": "string",
              "description": "The id of the last item in the current page of the list.",
              "format": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "The date UTC on which retrieves transactions from",
            "schema": {
              "title": "DateFrom",
              "type": "string",
              "description": "The date UTC on which retrieves transactions from",
              "format": "dateTime"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "The date UTC on which retrieves transactions to",
            "schema": {
              "title": "DateTo",
              "type": "string",
              "description": "The date UTC on which retrieves transactions to",
              "format": "dateTime"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PaymentsApi.DisputeStatus"
            }
          },
          {
            "name": "isOpen",
            "in": "query",
            "description": "The internal status of a dispute: true if OPEN, false if CLOSED",
            "schema": {
              "title": "IsOpen",
              "type": "boolean",
              "description": "The internal status of a dispute: true if OPEN, false if CLOSED",
              "format": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.SearchDisputes_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.SearchDisputes_Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/disputes/{id}": {
      "get": {
        "tags": [
          "Disputes"
        ],
        "summary": "Retrieves a dispute",
        "description": "Retrieves a dispute via its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The dispute Id",
            "required": true,
            "schema": {
              "title": "DisputeId",
              "type": "string",
              "description": "The dispute Id",
              "format": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.GetDisputeById_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.GetDisputeById_Result"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/payments/{paymentId}": {
      "get": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieves a payment",
        "description": "Retrieves a payment via its id.",
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "description": "The unique identifier of the payment to retrieve",
            "required": true,
            "schema": {
              "title": "Payment Id",
              "type": "string",
              "description": "The unique identifier of the payment to retrieve",
              "format": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.GetPaymentById_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.GetPaymentById_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Creates a payment",
        "description": "Creates a new payment.",
        "parameters": [
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The payment payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreatePayment_Request_Body"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreatePayment_Request_Body"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreatePayment_Request_Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Commands.CreatePayment_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Commands.CreatePayment_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/payouts": {
      "get": {
        "tags": [
          "Payouts"
        ],
        "summary": "Retrieves a list of payouts",
        "description": "Retrieves a list of payouts.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return. The default is 25.",
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "The maximum number of results to return. The default is 25.",
              "format": "string"
            }
          },
          {
            "name": "startingAfterId",
            "in": "query",
            "description": "The id of the first item in the current page of the list.",
            "schema": {
              "title": "StartingAfterId",
              "type": "string",
              "description": "The id of the first item in the current page of the list.",
              "format": "string"
            }
          },
          {
            "name": "endingBeforeId",
            "in": "query",
            "description": "The id of the last item in the current page of the list.",
            "schema": {
              "title": "EndingBeforeId",
              "type": "string",
              "description": "The id of the last item in the current page of the list.",
              "format": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "The date UTC on which retrieves payout from",
            "schema": {
              "title": "DateFrom",
              "type": "string",
              "description": "The date UTC on which retrieves payout from",
              "format": "dateTime"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "The date UTC on which retrieves payout to",
            "schema": {
              "title": "DateTo",
              "type": "string",
              "description": "The date UTC on which retrieves payout to",
              "format": "dateTime"
            }
          },
          {
            "name": "payoutId",
            "in": "query",
            "description": "",
            "schema": {
              "title": "PayoutId",
              "type": "string",
              "description": "",
              "format": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/BalancesApi.PayoutStatus"
            }
          },
          {
            "name": "amountMin",
            "in": "query",
            "description": "Minimum payout amount for filtering",
            "schema": {
              "title": "AmountMin",
              "type": "number",
              "description": "Minimum payout amount for filtering",
              "format": "string"
            }
          },
          {
            "name": "amountMax",
            "in": "query",
            "description": "Maximum payout amount for filtering",
            "schema": {
              "title": "AmountMax",
              "type": "number",
              "description": "Maximum payout amount for filtering",
              "format": "string"
            }
          },
          {
            "name": "processorConfigurationId",
            "in": "query",
            "description": "Filter payouts by processor configuration ID.",
            "schema": {
              "title": "ProcessorConfigurationId",
              "type": "string",
              "description": "Filter payouts by processor configuration ID.",
              "format": "string"
            }
          },
          {
            "name": "searchSettlment.limit",
            "in": "query",
            "description": "The maximum number of results to return. The default is 25.",
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "The maximum number of results to return. The default is 25.",
              "format": "string"
            }
          },
          {
            "name": "searchSettlment.startingAfterId",
            "in": "query",
            "description": "The id of the first item in the current page of the list.",
            "schema": {
              "title": "StartingAfterId",
              "type": "string",
              "description": "The id of the first item in the current page of the list.",
              "format": "string"
            }
          },
          {
            "name": "searchSettlment.endingBeforeId",
            "in": "query",
            "description": "The id of the last item in the current page of the list.",
            "schema": {
              "title": "EndingBeforeId",
              "type": "string",
              "description": "The id of the last item in the current page of the list.",
              "format": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.SearchPayouts_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.SearchPayouts_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/refunds": {
      "post": {
        "tags": [
          "Refunds"
        ],
        "summary": "Creates a refund",
        "description": "Creates a refund for a specific payment.",
        "parameters": [
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The refund payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreateRefund_Request_Body"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreateRefund_Request_Body"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreateRefund_Request_Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Commands.CreateRefund_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Commands.CreateRefund_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "Retrieves a list of refunds",
        "description": "Retrieves a list of refunds for a specific payment.",
        "parameters": [
          {
            "name": "paymentId",
            "in": "query",
            "description": "The unique identifier of the payment for which to retrieve the refunds",
            "required": true,
            "schema": {
              "title": "Payment Id",
              "type": "string",
              "description": "The unique identifier of the payment for which to retrieve the refunds",
              "format": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.SearchRefunds_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.SearchRefunds_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/refunds/{refundId}": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "Retrieves a refund",
        "description": "Retrieves a refund via its id.",
        "parameters": [
          {
            "name": "refundId",
            "in": "path",
            "description": "The unique identifier of the refund to retrieve",
            "required": true,
            "schema": {
              "title": "Refund Id",
              "type": "string",
              "description": "The unique identifier of the refund to retrieve",
              "format": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.GetRefundById_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.GetRefundById_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/subscribers": {
      "post": {
        "tags": [
          "Subscribers"
        ],
        "summary": "Creates a subscriber",
        "description": "Creates a subscriber.",
        "parameters": [
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The subscriber payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreateSubscriber_Request_Body"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreateSubscriber_Request_Body"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreateSubscriber_Request_Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Commands.CreateSubscriber_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Commands.CreateSubscriber_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Subscribers"
        ],
        "summary": "Retrieves a list of subscribers",
        "description": "Retrieves a list of subscribers.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return. The default is 10.",
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "The maximum number of results to return. The default is 10.",
              "format": "string"
            }
          },
          {
            "name": "startingAfterId",
            "in": "query",
            "description": "The id of the first item in the current page of the list, used for scrolling forward.",
            "schema": {
              "title": "StartingAfterId",
              "type": "string",
              "description": "The id of the first item in the current page of the list, used for scrolling forward.",
              "format": "string"
            }
          },
          {
            "name": "endingBeforeId",
            "in": "query",
            "description": "The id of the last item in the current page of the list, used for navigating backward..",
            "schema": {
              "title": "EndingBeforeId",
              "type": "string",
              "description": "The id of the last item in the current page of the list, used for navigating backward..",
              "format": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fullName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "The externalId ",
            "schema": {
              "title": "EndingBeforeId",
              "type": "string",
              "description": "The externalId ",
              "format": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.SearchSubscribers_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.SearchSubscribers_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/subscribers/{subscriberId}": {
      "get": {
        "tags": [
          "Subscribers"
        ],
        "summary": "Gets a subscriber",
        "description": "Gets a subscriber.",
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "The unique identifier of the subscriber to retrieve",
            "required": true,
            "schema": {
              "title": "Subscriber Id",
              "type": "string",
              "description": "The unique identifier of the subscriber to retrieve",
              "format": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Subscriber"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Subscriber"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Subscribers"
        ],
        "summary": "Updates a subscriber",
        "description": "Updates a subscriber.",
        "parameters": [
          {
            "name": "subscriberId",
            "in": "path",
            "description": "The unique identifier of the subscriber.",
            "required": true,
            "schema": {
              "title": "Subscriber Id",
              "type": "string",
              "description": "The unique identifier of the subscriber.",
              "format": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The subscriber payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.UpdateSubscriber_Request_Body"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.UpdateSubscriber_Request_Body"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.UpdateSubscriber_Request_Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/subscriptions": {
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Creates a subscription",
        "description": "Creates a subscription.",
        "parameters": [
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The subscription payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreateSubscription_Request_Body"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreateSubscription_Request_Body"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Commands.CreateSubscription_Request_Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Commands.CreateSubscription_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Commands.CreateSubscription_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieves a list of subscriptions",
        "description": "Retrieves a list of subscriptions.",
        "parameters": [
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Queries.SearchSubscriptions_Request_Body"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Queries.SearchSubscriptions_Request_Body"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Queries.SearchSubscriptions_Request_Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.SearchSubscriptions_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.SearchSubscriptions_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieves a subscription",
        "description": "Retrieves a subscription via its id.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The unique identifier of the subscription to retrieve",
            "required": true,
            "schema": {
              "title": "Subscription Id",
              "type": "string",
              "description": "The unique identifier of the subscription to retrieve",
              "format": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Subscription"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Common.Subscription"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/1.0/transactions": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieves a list of transactions",
        "description": "Retrieves a list of trasaction.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return. The default is 25.",
            "schema": {
              "title": "Limit",
              "type": "integer",
              "description": "The maximum number of results to return. The default is 25.",
              "format": "string"
            }
          },
          {
            "name": "startingAfterId",
            "in": "query",
            "description": "The id of the first item in the current page of the list.",
            "schema": {
              "title": "StartingAfterId",
              "type": "string",
              "description": "The id of the first item in the current page of the list.",
              "format": "string"
            }
          },
          {
            "name": "endingBeforeId",
            "in": "query",
            "description": "The id of the last item in the current page of the list.",
            "schema": {
              "title": "EndingBeforeId",
              "type": "string",
              "description": "The id of the last item in the current page of the list.",
              "format": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "The date UTC on which retrieves transaction from",
            "schema": {
              "title": "DateFrom",
              "type": "string",
              "description": "The date UTC on which retrieves transaction from",
              "format": "dateTime"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "The date UTC on which retrieves transaction to",
            "schema": {
              "title": "DateTo",
              "type": "string",
              "description": "The date UTC on which retrieves transaction to",
              "format": "dateTime"
            }
          },
          {
            "name": "amountMin",
            "in": "query",
            "description": "Minimum transaction amount for filtering",
            "schema": {
              "title": "AmountMin",
              "type": "number",
              "description": "Minimum transaction amount for filtering",
              "format": "string"
            }
          },
          {
            "name": "amountMax",
            "in": "query",
            "description": "Maximum transaction amount for filtering",
            "schema": {
              "title": "AmountMax",
              "type": "number",
              "description": "Maximum transaction amount for filtering",
              "format": "string"
            }
          },
          {
            "name": "processorConfigurationId",
            "in": "query",
            "description": "Filter transaction by processor configuration ID.",
            "schema": {
              "title": "ProcessorConfigurationId",
              "type": "string",
              "description": "Filter transaction by processor configuration ID.",
              "format": "string"
            }
          },
          {
            "name": "processingDateFrom",
            "in": "query",
            "description": "The date UTC of processing which retrieves transaction from",
            "schema": {
              "title": "ProcessingDateFrom",
              "type": "string",
              "description": "The date UTC of processing which retrieves transaction from",
              "format": "dateTime"
            }
          },
          {
            "name": "processingDateTo",
            "in": "query",
            "description": "The date UTC of processing which retrieves transaction to",
            "schema": {
              "title": "ProcessingDateTo",
              "type": "string",
              "description": "The date UTC of processing which retrieves transaction to",
              "format": "dateTime"
            }
          },
          {
            "name": "payoutId",
            "in": "query",
            "description": "The unique identifier of the payout",
            "schema": {
              "title": "PayoutId",
              "type": "string",
              "description": "The unique identifier of the payout",
              "format": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/BalancesApi.TransactionTypes"
            }
          },
          {
            "name": "referenceId",
            "in": "query",
            "description": "The id of the transaction reference",
            "schema": {
              "title": "ReferenceId",
              "type": "string",
              "description": "The id of the transaction reference",
              "format": "string"
            }
          },
          {
            "name": "x-LiveMode",
            "in": "header",
            "description": "When true, the operations are executed in production mode. Defaults to false.",
            "schema": {
              "title": "Live mode",
              "type": "boolean",
              "description": "When true, the operations are executed in production mode. Defaults to false.",
              "format": "bool"
            }
          },
          {
            "name": "x-SubmerchantId",
            "in": "header",
            "description": "The identifier of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant id",
              "type": "string",
              "description": "The identifier of the Submerchant.",
              "format": "string"
            }
          },
          {
            "name": "x-SubmerchantApiKey",
            "in": "header",
            "description": "The api key of the Submerchant.",
            "required": true,
            "schema": {
              "title": "Submerchant api key",
              "type": "string",
              "description": "The api key of the Submerchant.",
              "format": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.SearchTransactions_Result"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queries.SearchTransactions_Result"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BalancesApi.PayoutDetailType": {
        "enum": [
          "presentment",
          "reimbursement",
          "closingBalance",
          "openingBalance",
          "commission",
          "rounding",
          "rollingDissolution",
          "rollingDetention",
          "adjustmentVarious",
          "merchantAdjustmentGross",
          "merchantAdjustmentComm"
        ],
        "type": "string"
      },
      "BalancesApi.PayoutStatus": {
        "enum": [
          "created",
          "executed"
        ],
        "type": "string"
      },
      "BalancesApi.TransactionTypes": {
        "enum": [
          "payment",
          "refund",
          "refundFailure",
          "payout",
          "reservedFunds",
          "disputed",
          "disputedWon",
          "disputedLost",
          "reversalRefund",
          "reversalDisputeLost",
          "reversalPayment"
        ],
        "type": "string"
      },
      "Commands.CreateCustomer_Request_Body": {
        "title": "Customer",
        "type": "object",
        "properties": {
          "fullName": {
            "title": "Full name",
            "type": "string",
            "description": "The first and last name of the customer.",
            "format": "string",
            "nullable": true
          },
          "emailAddress": {
            "title": "Email address",
            "type": "string",
            "description": "Email address of the customer. When provided notifications will be sent via email",
            "format": "string",
            "nullable": true
          },
          "mobileNumber": {
            "title": "Mobile number",
            "type": "string",
            "description": "Mobile number of the customer. When provided notifications will be sent via sms",
            "format": "string",
            "nullable": true
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "A set of key pairs associated with the customer.",
            "format": "object",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Commands.CreateCustomer_Result": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the customer.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Commands.CreatePayment_Request_Body": {
        "title": "Payment",
        "required": [
          "amount",
          "currency",
          "reference"
        ],
        "type": "object",
        "properties": {
          "reference": {
            "title": "Reference",
            "minLength": 1,
            "type": "string",
            "description": "An identifier for the payment, e.g. \"Order 123456\".",
            "format": "string"
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount to be paid.",
            "format": "decimal"
          },
          "currency": {
            "title": "Currency",
            "minLength": 1,
            "type": "string",
            "description": "The ISO currency.",
            "format": "string"
          },
          "callbackUrl": {
            "title": "CallbackUrl",
            "type": "string",
            "description": "A custom webhook endpoint that will receive a POST notification upon payment completion (success or failure). It does not override the default merchant webhook.",
            "format": "string",
            "nullable": true
          },
          "shipmentRequired": {
            "title": "Shipment Required",
            "type": "boolean",
            "description": "Indicates that the payment relates to goods which will be shipped. Defaults to 'false'",
            "format": "object"
          },
          "useEmbed": {
            "title": "Use Embed",
            "type": "boolean",
            "description": "Indicates whether the payment mask interace should be embedded within an e-commerce platform. Defaults to 'false'",
            "format": "object"
          },
          "embedSettings": {
            "$ref": "#/components/schemas/Commands.CreatePayment_Request_Body_EmbedConfig"
          },
          "customer": {
            "$ref": "#/components/schemas/Commands.CreatePayment_Request_Body_CustomerDto"
          },
          "subChannelData": {
            "$ref": "#/components/schemas/Commands.CreatePayment_Request_Body_SubChannelAdditionalData"
          },
          "returnUrls": {
            "$ref": "#/components/schemas/Commands.CreatePayment_Request_Body_ReturnUrlsDto"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "A set of key pairs associated with the payment.",
            "format": "object",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Commands.CreatePayment_Request_Body_CustomerDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "title": "CustomerId",
            "type": "string",
            "description": "The id of the customer. If passed, the fields fullName, EmailAddress, MobileNumber and PreferredLanguage will be read from the customer information.",
            "format": "string",
            "nullable": true
          },
          "fullName": {
            "title": "Full Name",
            "type": "string",
            "description": "The first and last name of the customer.",
            "format": "string",
            "nullable": true
          },
          "emailAddress": {
            "title": "Email Address",
            "type": "string",
            "description": "Email address of the customer. When provided notifications will be sent via email",
            "format": "string",
            "nullable": true
          },
          "mobileNumber": {
            "title": "Mobile Number",
            "type": "string",
            "description": "Mobile number of the customer. When provided notifications will be sent via sms",
            "format": "string",
            "nullable": true
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Commands.CreatePayment_Request_Body_CustomerDto_AddressDto"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Commands.CreatePayment_Request_Body_CustomerDto_AddressDto"
          },
          "preferredLanguage": {
            "title": "Language",
            "type": "string",
            "description": "The language code (ISO 639-1, two-letter) to use for customer notifications. If not specified, the default language 'it' is used.",
            "format": "iso-639-1",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Commands.CreatePayment_Request_Body_CustomerDto_AddressDto": {
        "title": "Address",
        "type": "object",
        "properties": {
          "addressLine1": {
            "title": "Address Line 1",
            "type": "string",
            "description": "Address Line 1.",
            "format": "string",
            "nullable": true
          },
          "addressLine2": {
            "title": "Address Line 2",
            "type": "string",
            "description": "Address Line 2.",
            "format": "string",
            "nullable": true
          },
          "adminArea1": {
            "title": "Admin Area 1",
            "type": "string",
            "description": "Two-letters ISO state code.",
            "format": "ISO 3166-2",
            "nullable": true
          },
          "adminArea2": {
            "title": "Admin Area 2",
            "type": "string",
            "description": "City, town or village.",
            "format": "string",
            "nullable": true
          },
          "postalCode": {
            "title": "Postal Code",
            "type": "string",
            "description": "Postal code.",
            "format": "string",
            "nullable": true
          },
          "countryCode": {
            "title": "Country Code",
            "type": "string",
            "description": "Three-letters ISO country code.",
            "format": "ISO 3166-1",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The address of the customer. If 'shipmentRequired' is set to 'true', and object containing the full address is required.",
        "format": "object"
      },
      "Commands.CreatePayment_Request_Body_EmbedConfig": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "nullable": true
          },
          "theme": {
            "$ref": "#/components/schemas/Commands.CreatePayment_Request_Body_EmbedConfig_ThemeEnum"
          }
        },
        "additionalProperties": false
      },
      "Commands.CreatePayment_Request_Body_EmbedConfig_ThemeEnum": {
        "enum": [
          "light",
          "dark"
        ],
        "type": "string"
      },
      "Commands.CreatePayment_Request_Body_ReturnUrlsDto": {
        "type": "object",
        "properties": {
          "returnUrl": {
            "title": "Return url",
            "type": "string",
            "description": "The url to redirect to for notifying the completion of the transaction (either successful or not).",
            "format": "string",
            "nullable": true
          },
          "cancelUrl": {
            "title": "Cancel url",
            "type": "string",
            "description": "The url to redirect to for notifying that the customer decided to cancel the payment.",
            "format": "string",
            "nullable": true
          },
          "failedUrl": {
            "title": "Failed url",
            "type": "string",
            "description": "The url to redirect to for notifying that the payment failed.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Commands.CreatePayment_Request_Body_SubChannelAdditionalData": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PaymentsApi.SubChannelType"
          },
          "description": {
            "title": "Subchannel Description",
            "type": "string",
            "description": "",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Commands.CreatePayment_Result": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the payment.",
            "format": "string",
            "nullable": true
          },
          "redirectUrl": {
            "title": "Redirect url",
            "type": "string",
            "description": "The url to redirect to for completing the payment.",
            "format": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Commands.CreateRefund_Request_Body": {
        "title": "Refund",
        "required": [
          "amount",
          "paymentId"
        ],
        "type": "object",
        "properties": {
          "paymentId": {
            "title": "Payment Id",
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier of the payment to be refunded.",
            "format": "string"
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount to be refunded.",
            "format": "decimal"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "A set of key pairs associated with the refund.",
            "format": "object",
            "nullable": true
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A description for identify the refund operation",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Commands.CreateRefund_Result": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the refund.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Commands.CreateSubscriber_Request_Body": {
        "title": "Customer",
        "type": "object",
        "properties": {
          "subscriptionId": {
            "title": "Subscription Id",
            "type": "string",
            "description": "The unique identifier of the subscription.",
            "format": "string",
            "nullable": true
          },
          "customerId": {
            "title": "Customer Id",
            "type": "string",
            "description": "The unique identifier of the customer.",
            "format": "string",
            "nullable": true
          },
          "returnUrls": {
            "$ref": "#/components/schemas/Commands.CreateSubscriber_Request_Body_ReturnUrlsDto"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "A set of key pairs associated with the subscriber.",
            "format": "object",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Commands.CreateSubscriber_Request_Body_ReturnUrlsDto": {
        "title": "Return urls",
        "type": "object",
        "properties": {
          "returnUrl": {
            "title": "Return url",
            "type": "string",
            "description": "The url to redirect to for notifying the completion of the setup of the payment method (either successful or not).",
            "format": "string",
            "nullable": true
          },
          "cancelUrl": {
            "title": "Cancel url",
            "type": "string",
            "description": "The url to redirect to for notifying that the customer decided to cancel the payment method setup.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A set of urls to redirect to when the payment method has been setup or cancelled.",
        "format": "object"
      },
      "Commands.CreateSubscriber_Result": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the customer.",
            "format": "string",
            "nullable": true
          },
          "paymentSetupRedirectUrl": {
            "title": "Payment setup redirect url",
            "type": "string",
            "description": "The url to redirect to for setting up the payment.",
            "format": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Commands.CreateSubscription_Request_Body": {
        "title": "Subscription",
        "required": [
          "amount",
          "currency",
          "frequency",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "minLength": 1,
            "type": "string",
            "description": "The name of the subscription.",
            "format": "string"
          },
          "frequency": {
            "$ref": "#/components/schemas/SubscriptionsApi.Frequency"
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount of the subscription.",
            "format": "decimal"
          },
          "currency": {
            "title": "Currency",
            "minLength": 1,
            "type": "string",
            "description": "The currency of the subscription.",
            "format": "string"
          },
          "trialDays": {
            "title": "Trial Days",
            "type": "integer",
            "description": "The trial period, in days, of the subscription.",
            "format": "integer"
          },
          "reference": {
            "title": "Reference",
            "type": "string",
            "description": "The internal reference for the subscription.",
            "format": "string",
            "nullable": true
          },
          "startDateTime": {
            "title": "Start DateTime",
            "type": "string",
            "description": "The date and time when the subscription starts accepting subscribers.",
            "format": "string"
          },
          "endDateTime": {
            "title": "End DateTime",
            "type": "string",
            "description": "The date and time when the subscription ends accepting subscribers.",
            "format": "string",
            "nullable": true
          },
          "notifyBeforeExpiration": {
            "$ref": "#/components/schemas/SubscriptionsApi.NotificationTime"
          },
          "notificationChannel": {
            "$ref": "#/components/schemas/SubscriptionsApi.NotificationChannel"
          },
          "maxChargeAttempts": {
            "title": "Max Charge Attempts",
            "type": "integer",
            "description": "The max number of attempts for charging the payment.",
            "format": "integer"
          },
          "hoursBetweenAttempts": {
            "title": "Hours Between Attempts",
            "type": "integer",
            "description": "The delay, in hours, between each charge attempt.",
            "format": "integer"
          }
        },
        "additionalProperties": false
      },
      "Commands.CreateSubscription_Result": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the subscription.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Commands.UpdateSubscriber_Request_Body": {
        "title": "Update",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/SubscriptionsApi.SubscriberStatus"
          }
        },
        "additionalProperties": false
      },
      "Common.Charge": {
        "type": "object",
        "properties": {
          "maskedPan": {
            "title": "Brand",
            "type": "string",
            "description": "The brand of the charge.",
            "format": "string",
            "nullable": true
          },
          "brand": {
            "title": "MaskedPan",
            "type": "string",
            "description": "The maskedPan of the charge.",
            "format": "string",
            "nullable": true
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount of the thecharge.",
            "format": "string"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "The currency of the charge.",
            "format": "decimal",
            "nullable": true
          },
          "processTimeStamp": {
            "title": "ProcessTimeStamp",
            "type": "string",
            "description": "The process datetime of the charge.",
            "format": "datetime",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionsApi.RecurringPaymentStatus"
          }
        },
        "additionalProperties": false
      },
      "Common.Customer": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the customer.",
            "format": "string",
            "nullable": true
          },
          "fullName": {
            "title": "Full name",
            "type": "string",
            "description": "The first and last name of the customer.",
            "format": "string",
            "nullable": true
          },
          "emailAddress": {
            "title": "Email address",
            "type": "string",
            "description": "Email address of the customer.",
            "format": "string",
            "nullable": true
          },
          "mobileNumber": {
            "title": "Mobile number",
            "type": "string",
            "description": "Mobile number of the customer.",
            "format": "string",
            "nullable": true
          },
          "preferredLanguage": {
            "title": "Language",
            "type": "string",
            "description": "The language ISO to use for the notifications to the customer. If not specified, the default language is used.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Common.Subscriber": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the subscriber.",
            "format": "string",
            "nullable": true
          },
          "subscriptionId": {
            "title": "Subscription Id",
            "type": "string",
            "description": "The unique identifier of the subscription.",
            "format": "string",
            "nullable": true
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount associated to the subscription.",
            "format": "decimal"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "The currency associated to the subscription.",
            "format": "string",
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/SubscriptionsApi.SubscriberStatus"
          },
          "createDateTime": {
            "title": "Create Date Time",
            "type": "string",
            "description": "The creation date of the subscription.",
            "format": "datetime"
          },
          "endDateTime": {
            "title": "End Date Time",
            "type": "string",
            "description": "The end date of the subscription.",
            "format": "datetime",
            "nullable": true
          },
          "nextChargeDate": {
            "title": "Next Charge Date",
            "type": "string",
            "description": "The next charge date of the subscription.",
            "format": "datetime",
            "nullable": true,
            "readOnly": true
          },
          "charges": {
            "title": "Charges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.Charge"
            },
            "description": "The list of the charges associated to the subscription.",
            "format": "string",
            "nullable": true,
            "readOnly": true
          },
          "customer": {
            "$ref": "#/components/schemas/Common.Customer"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/Common.Subscriber_PaymentMethodDto"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "A set of key pairs associated with the subscriber.",
            "format": "object",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Common.Subscriber_PaymentMethodDto": {
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string",
            "description": "The type of the payment method.",
            "format": "string",
            "nullable": true
          },
          "brand": {
            "title": "Brand",
            "type": "string",
            "description": "The brand associated with the payment method or with the card (eg. Visa, Mastercard, PayPal).",
            "format": "string",
            "nullable": true
          },
          "expirationYear": {
            "title": "Expiration Year",
            "type": "string",
            "description": "The expiration year, only for card payments.",
            "format": "string",
            "nullable": true
          },
          "expirationMonth": {
            "title": "Expiration Month",
            "type": "string",
            "description": "The expiration month, only for card payments.",
            "format": "string",
            "nullable": true
          },
          "maskedPan": {
            "title": "Masked pan",
            "type": "string",
            "description": "The mask card number, only for card payments.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Common.Subscription": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Subscription Id",
            "type": "string",
            "description": "The first and last name of the customer.",
            "format": "string",
            "nullable": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the subscription.",
            "format": "string",
            "nullable": true
          },
          "frequency": {
            "$ref": "#/components/schemas/SubscriptionsApi.Frequency"
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount of the subscription.",
            "format": "decimal"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "The currency of the subscription.",
            "format": "string",
            "nullable": true
          },
          "trialDays": {
            "title": "TrialDays",
            "type": "integer",
            "description": "The trial days of the subscription.",
            "format": "integer"
          },
          "reference": {
            "title": "Reference",
            "type": "string",
            "description": "The internal reference for the subscription.",
            "format": "string",
            "nullable": true
          },
          "startDateTime": {
            "title": "StartDateTime",
            "type": "string",
            "description": "The date and time when the subscription starts accepting subscribers.",
            "format": "string"
          },
          "endDateTime": {
            "title": "EndDateTime",
            "type": "string",
            "description": "The date and time when the subscription ends accepting subscribers.",
            "format": "string",
            "nullable": true
          },
          "notifyBeforeExpiration": {
            "$ref": "#/components/schemas/SubscriptionsApi.NotificationTime"
          },
          "notificationChannel": {
            "$ref": "#/components/schemas/SubscriptionsApi.NotificationChannel"
          },
          "maxChargeAttempts": {
            "title": "MaxChargeAttempts",
            "type": "integer",
            "description": "The max number of attempts for charging the payment.",
            "format": "integer"
          },
          "hoursBetweenAttempts": {
            "title": "HoursBetweenAttempts",
            "type": "integer",
            "description": "The delay, in hours, between each charge attempt.",
            "format": "integer"
          }
        },
        "additionalProperties": false
      },
      "Mvc.ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "Nets.AuthorizeS2SCharge_Request_BodyDto": {
        "required": [
          "authNotifyUrl",
          "gdiNotifyUrl"
        ],
        "type": "object",
        "properties": {
          "storeReference": {
            "title": "StoreReference",
            "type": "string",
            "description": "Website of the store from which the charges were originated.",
            "format": "string",
            "nullable": true
          },
          "card": {
            "$ref": "#/components/schemas/Nets.AuthorizeS2SCharge_Request_BodyDto_CardDto"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/Nets.AuthorizeS2SCharge_Request_BodyDto_PaymentMethodDto"
          },
          "gdiNotifyUrl": {
            "title": "GDI completion notification url",
            "minLength": 1,
            "type": "string",
            "description": "The url where to notify the completion of the device identification.",
            "format": "string"
          },
          "authNotifyUrl": {
            "title": "Authentication completion notification url",
            "minLength": 1,
            "type": "string",
            "description": "The url where to notify the completion of the 3DS authentication.",
            "format": "string"
          }
        },
        "additionalProperties": false
      },
      "Nets.AuthorizeS2SCharge_Request_BodyDto_CardDto": {
        "title": "Card",
        "required": [
          "cardHolder",
          "cardNumber",
          "expirationMonth",
          "expirationYear"
        ],
        "type": "object",
        "properties": {
          "cardHolder": {
            "title": "Card Holder",
            "minLength": 1,
            "type": "string",
            "description": "First and last name of the card holder.",
            "format": "string"
          },
          "cardNumber": {
            "title": "Card Number",
            "minLength": 1,
            "type": "string",
            "description": "Card number (***N.B. the value must be encrypted***).",
            "format": "string"
          },
          "expirationMonth": {
            "title": "Expiration Month",
            "minLength": 1,
            "type": "string",
            "description": "Expiration month in MM format.",
            "format": "string"
          },
          "expirationYear": {
            "title": "Expiration Year",
            "minLength": 1,
            "type": "string",
            "description": "Expiration year in YYYY format.",
            "format": "string"
          },
          "securityCode": {
            "title": "Security Code",
            "type": "string",
            "description": "Security code (***N.B. the value must be encrypted***).",
            "format": "string",
            "nullable": true
          },
          "savePaymentMethod": {
            "title": "SavePaymentMethod",
            "type": "boolean",
            "description": "If true, the credit card will be associated to payment's customer as a PaymentMethodDto",
            "format": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payment card information to use for the transaction.",
        "format": "object"
      },
      "Nets.AuthorizeS2SCharge_Request_BodyDto_PaymentMethodDto": {
        "title": "Payment Method",
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "title": "Id",
            "type": "string",
            "description": "Payment Method Id",
            "format": "s",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payment method information associated to payment's customer to use for the transaction. If passed, CardDto fields will be ignored.",
        "format": "object"
      },
      "Nets.AuthorizeS2SCharge_Result": {
        "type": "object",
        "properties": {
          "success": {
            "title": "Success",
            "type": "boolean",
            "description": "True if the operation is successful.",
            "format": "boolean"
          },
          "completed": {
            "title": "Completed",
            "type": "boolean",
            "description": "True if the transaction has completed (either authorized or declined), false if additional steps are required.",
            "format": "string"
          },
          "gatewayCode": {
            "title": "Gateway Code",
            "type": "string",
            "description": "Contains the message straight from the gateway, useful in case of declined transactions.",
            "format": "string",
            "nullable": true
          },
          "iframe": {
            "$ref": "#/components/schemas/Nets.AuthorizeS2SCharge_Result_IframeDto"
          },
          "processorCode": {
            "title": "Processor Code",
            "type": "string",
            "description": "Contains the transaction processing code obtained from the processor, useful in case of declined transactions.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Nets.AuthorizeS2SCharge_Result_IframeDto": {
        "title": "Iframe",
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string",
            "description": "The url where to point the iframe.",
            "format": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/Nets.AuthorizeS2SCharge_Result_IframeDto_IframeTypeEnum"
          }
        },
        "additionalProperties": false,
        "description": "Indicates that the page should create an iframe (either hidden or visible) with the indicated url.<br />Used for the 3DS authentication flow.",
        "format": "object"
      },
      "Nets.AuthorizeS2SCharge_Result_IframeDto_IframeTypeEnum": {
        "title": "Iframe type",
        "enum": [
          "hidden",
          "visible"
        ],
        "type": "string",
        "description": "If the iframe should be hidden (device identification) or visible (authentication).",
        "format": "string"
      },
      "Nets.CreateS2SCharge_Request": {
        "type": "object",
        "properties": {
          "paymentId": {
            "title": "Payment Id",
            "type": "string",
            "description": "The unique identifier of the payment.",
            "format": "string",
            "nullable": true
          },
          "configurationId": {
            "title": "Configuration Id",
            "type": "string",
            "description": "The unique identifier of payment configuration (MID).",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Nets.CreateS2SCharge_Result": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the charge.",
            "format": "string",
            "nullable": true
          },
          "encryptionKey": {
            "title": "Encryption key",
            "type": "string",
            "description": "The key to use for encrypting the card number and security code.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentsApi.AntiFraudRisk": {
        "enum": [
          "unknown",
          "low",
          "medium",
          "high"
        ],
        "type": "string"
      },
      "PaymentsApi.ChannelEnum": {
        "enum": [
          "web",
          "manual",
          "initializeRecurring",
          "recurring",
          "offline"
        ],
        "type": "string"
      },
      "PaymentsApi.ChargeStatus": {
        "enum": [
          "pending",
          "succeeded",
          "failed"
        ],
        "type": "string"
      },
      "PaymentsApi.DisputeReason": {
        "enum": [
          "doubleAuthorization",
          "goodsOrServicesNotProvided",
          "goodsOrServicesUnacceptable",
          "fraudulent",
          "notRecognized",
          "other",
          "warningBulletin",
          "authorizationNotObtained",
          "accountNumberNotInFile",
          "transactionAmountDiffers",
          "pointOfInteractionError",
          "cancelledTransactions",
          "latePresentment",
          "poiCurrencyConversion",
          "cardholderDispute",
          "creditNotProcessed",
          "chipLiabilityShift",
          "authorization",
          "processingError",
          "consumer"
        ],
        "type": "string"
      },
      "PaymentsApi.DisputeStatus": {
        "enum": [
          "created",
          "responded",
          "underReview",
          "won",
          "lost",
          "cancelled"
        ],
        "type": "string"
      },
      "PaymentsApi.PaymentStatus": {
        "enum": [
          "created",
          "pending",
          "cancelled",
          "authorizing",
          "requiresCapture",
          "processing",
          "failed",
          "succeeded",
          "partiallyRefunded",
          "refunded"
        ],
        "type": "string"
      },
      "PaymentsApi.RefundStatus": {
        "enum": [
          "created",
          "approved",
          "rejectedNoFunds",
          "failed",
          "succeeded",
          "reversed",
          "pending"
        ],
        "type": "string"
      },
      "PaymentsApi.SubChannelType": {
        "enum": [
          "plugin",
          "s2S",
          "wallet301"
        ],
        "type": "string"
      },
      "Queries.GetCustomerPaymentMethods_Result": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the paymentMethod",
            "format": "string",
            "nullable": true
          },
          "expireMonth": {
            "title": "ExpireMonth",
            "type": "string",
            "description": "Card expired month information",
            "format": "string",
            "nullable": true
          },
          "expireYear": {
            "title": "ExpireYear",
            "type": "string",
            "description": "Card expired year information",
            "format": "string",
            "nullable": true
          },
          "brand": {
            "title": "Card Brand",
            "type": "string",
            "description": "Card brand information",
            "format": "string",
            "nullable": true
          },
          "cardHolder": {
            "title": "Card Holder",
            "type": "string",
            "description": "The card holder information.",
            "format": "string",
            "nullable": true
          },
          "cardNumber": {
            "title": "Card Number",
            "type": "string",
            "description": "Card number masked information.",
            "format": "string",
            "nullable": true
          },
          "paymentMethod": {
            "title": "Payment Method",
            "type": "string",
            "description": "Payment Method Information ",
            "format": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Queries.GetDisputeById_DisputeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the dispute",
            "format": "string",
            "nullable": true
          },
          "createDateTime": {
            "title": "Create Date Time",
            "type": "string",
            "description": "The date and time at which the transaction was created",
            "format": "string",
            "nullable": true
          },
          "liveMode": {
            "title": "LiveMode",
            "type": "boolean",
            "description": "The Live mode",
            "format": "boolean"
          },
          "paymentId": {
            "title": "PaymentId",
            "type": "string",
            "description": "The unique identifier of the payment",
            "format": "string",
            "nullable": true
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount of the dispute.",
            "format": "string"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "The ISO currency.",
            "format": "string",
            "nullable": true
          },
          "reason": {
            "$ref": "#/components/schemas/PaymentsApi.DisputeReason"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentsApi.DisputeStatus"
          }
        },
        "additionalProperties": false
      },
      "Queries.GetDisputeById_Result": {
        "type": "object",
        "properties": {
          "dispute": {
            "$ref": "#/components/schemas/Queries.GetDisputeById_DisputeResponse"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Queries.GetDisputeById_TransactionResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Queries.GetDisputeById_TransactionResponse": {
        "title": "Transaction",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the transaction",
            "format": "string",
            "nullable": true
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount of the transaction.",
            "format": "string"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "The ISO currency.",
            "format": "string",
            "nullable": true
          },
          "createDateTime": {
            "title": "Create Date Time",
            "type": "string",
            "description": "The date and time at which the transaction was created",
            "format": "string",
            "nullable": true
          },
          "feeAmount": {
            "title": "FeeAmount",
            "type": "number",
            "description": "The amount of the fee.",
            "format": "string"
          }
        },
        "additionalProperties": false,
        "description": "Information of the transaction related to the dispute.",
        "format": "object"
      },
      "Queries.GetPaymentById_Result": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the payment",
            "format": "string",
            "nullable": true
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount to be paid.",
            "format": "decimal"
          },
          "antiFraudRisk": {
            "$ref": "#/components/schemas/PaymentsApi.AntiFraudRisk"
          },
          "arn": {
            "title": "Arn",
            "type": "string",
            "description": "The Arn code",
            "format": "string",
            "nullable": true
          },
          "channel": {
            "$ref": "#/components/schemas/PaymentsApi.ChannelEnum"
          },
          "createDateTime": {
            "title": "Create Date Time",
            "type": "string",
            "description": "The date and time at which the payment was created",
            "format": "string"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "The ISO currency.",
            "format": "string",
            "nullable": true
          },
          "customer": {
            "$ref": "#/components/schemas/Queries.GetPaymentById_Result_CustomerDto"
          },
          "disputed": {
            "title": "Disputed",
            "type": "boolean",
            "description": "If this payment is linked to a dispute",
            "format": "boolean"
          },
          "disputes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Queries.GetPaymentById_Result_DisputeInfoDto"
            },
            "nullable": true
          },
          "fee": {
            "$ref": "#/components/schemas/Queries.GetPaymentById_Result_FeeDto"
          },
          "isSuccessful": {
            "title": "Is Successful",
            "type": "boolean",
            "description": "A shortcut for checking whether the payment is successful or not.",
            "format": "string"
          },
          "latestCharge": {
            "$ref": "#/components/schemas/Queries.GetPaymentById_Result_ChargeDto"
          },
          "liveMode": {
            "title": "Live Mode",
            "type": "boolean",
            "description": "Whether the payment has been created in live or test environment",
            "format": "string"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "A set of key pairs associated with the payment.",
            "format": "object",
            "nullable": true
          },
          "processingDate": {
            "title": "Processing Date Time",
            "type": "string",
            "description": "The date and time at which the payment was processed",
            "format": "string",
            "nullable": true
          },
          "reference": {
            "title": "Reference",
            "type": "string",
            "description": "An identifier for the payment, e.g. \"Order 123456\".",
            "format": "string",
            "nullable": true
          },
          "subscriptionId": {
            "title": "SuscriptionId",
            "type": "string",
            "description": "The unique identifier of the subscription, if the payment is related to a subscription",
            "format": "string",
            "nullable": true
          },
          "subscriberId": {
            "title": "SubscriberId",
            "type": "string",
            "description": "The unique identifier of the subscriber, if the payment is related to a subscription",
            "format": "string",
            "nullable": true
          },
          "shipmentRequired": {
            "title": "Shipment Required",
            "type": "boolean",
            "description": "Indicates that the payment relates to goods which will be shipped. Defaults to 'false'",
            "format": "object"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentsApi.PaymentStatus"
          },
          "subChannelData": {
            "$ref": "#/components/schemas/Queries.GetPaymentById_Result_SubChannelAdditionalData"
          },
          "transactionData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Queries.GetPaymentById_Result_ChargeDto": {
        "title": "Latest Charge",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the charge",
            "format": "string",
            "nullable": true
          },
          "createDateTime": {
            "title": "Create Date Time",
            "type": "string",
            "description": "The date and time at which the charge was created",
            "format": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentsApi.ChargeStatus"
          },
          "gatewayCode": {
            "title": "Gateway Code",
            "type": "string",
            "description": "Contains the message straight from the gateway, useful in case of declined transactions.",
            "format": "boolean",
            "nullable": true
          },
          "processorCode": {
            "title": "Processor Code",
            "type": "string",
            "description": "Contains the transaction processing code obtained from the processor, useful in case of declined transactions.",
            "format": "string",
            "nullable": true
          },
          "userAgent": {
            "title": "UserAgent",
            "type": "string",
            "description": "The User Agent header sent by the client's browser",
            "format": "string",
            "nullable": true
          },
          "userIp": {
            "title": "UserIp",
            "type": "string",
            "description": "The IP address of the user making the request",
            "format": "string",
            "nullable": true
          },
          "storeReference": {
            "title": "StoreReference",
            "type": "string",
            "description": "Contains the reference to a specific store associated with the request",
            "format": "string",
            "nullable": true
          },
          "remoteIpAddress": {
            "title": "RemoteIPAddress",
            "type": "string",
            "description": "The IP address of the client connecting to the server",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The latest charge associated with the payment.",
        "format": "object"
      },
      "Queries.GetPaymentById_Result_CustomerDto": {
        "title": "Customer",
        "type": "object",
        "properties": {
          "customerId": {
            "title": "Customer Id",
            "type": "string",
            "description": "The unique identifier of the customer.",
            "format": "string",
            "nullable": true
          },
          "fullName": {
            "title": "Full name",
            "type": "string",
            "description": "The first and last name of the customer.",
            "format": "string",
            "nullable": true
          },
          "emailAddress": {
            "title": "Email address",
            "type": "string",
            "description": "Email address of the customer. When provided notifications will be sent via email.",
            "format": "string",
            "nullable": true
          },
          "mobileNumber": {
            "title": "Mobile number",
            "type": "string",
            "description": "Mobile number of the customer. When provided notifications will be sent via sms.",
            "format": "string",
            "nullable": true
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Queries.GetPaymentById_Result_CustomerDto_AddressDto"
          },
          "preferredLanguage": {
            "title": "Language",
            "type": "string",
            "description": "The language ISO to use for the notifications to the customer. If not specified, the default language is used.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The customer associated with the payment.",
        "format": "object"
      },
      "Queries.GetPaymentById_Result_CustomerDto_AddressDto": {
        "title": "Address",
        "type": "object",
        "properties": {
          "addressLine1": {
            "title": "Address Line 1",
            "type": "string",
            "description": "Address Line 1.",
            "format": "string",
            "nullable": true
          },
          "addressLine2": {
            "title": "Address Line 2",
            "type": "string",
            "description": "Address Line 2.",
            "format": "string",
            "nullable": true
          },
          "adminArea1": {
            "title": "Admin Area 1",
            "type": "string",
            "description": "Province or State.",
            "format": "string",
            "nullable": true
          },
          "adminArea2": {
            "title": "Admin Area 2",
            "type": "string",
            "description": "City, town or village.",
            "format": "string",
            "nullable": true
          },
          "postalCode": {
            "title": "Postal Code",
            "type": "string",
            "description": "Postal code.",
            "format": "string",
            "nullable": true
          },
          "countryCode": {
            "title": "Country Code",
            "type": "string",
            "description": "Two-letters ISO country code.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The address of the customer. If 'shipmentRequired' is set to 'true', and object containing the full address is required.",
        "format": "object"
      },
      "Queries.GetPaymentById_Result_DisputeInfoDto": {
        "title": "Dispute",
        "type": "object",
        "properties": {
          "id": {
            "title": "Dispute Id",
            "type": "string",
            "description": "The unique identifier of the dispute.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The dispute(s) associated to this payment.",
        "format": "object"
      },
      "Queries.GetPaymentById_Result_FeeDto": {
        "title": "Fee",
        "type": "object",
        "properties": {
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount of the fee.",
            "format": "decimal"
          },
          "isApplied": {
            "title": "IsApplied",
            "type": "boolean",
            "description": "If the fee has been already applied or not",
            "format": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "The fee associated with the payment.",
        "format": "object"
      },
      "Queries.GetPaymentById_Result_SubChannelAdditionalData": {
        "type": "object",
        "properties": {
          "subChannelType": {
            "$ref": "#/components/schemas/PaymentsApi.SubChannelType"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Queries.GetPaymentMethods_Result": {
        "type": "object",
        "properties": {
          "configurationId": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Queries.GetRefundById_Result": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the refund",
            "format": "string",
            "nullable": true
          },
          "liveMode": {
            "title": "Live Mode",
            "type": "boolean",
            "description": "Whether the refund has been created in live or test environment",
            "format": "string"
          },
          "createDateTime": {
            "title": "Create Date Time",
            "type": "string",
            "description": "The date and time at which the refund was created",
            "format": "string"
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount of the refund.",
            "format": "string"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "The ISO currency.",
            "format": "string",
            "nullable": true
          },
          "externalRefund": {
            "title": "External Refund",
            "type": "boolean",
            "description": "True if the refund has been executed outside the platform.",
            "format": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentsApi.RefundStatus"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "A set of key pairs associated with the refund.",
            "format": "object",
            "nullable": true
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The description of the refund.",
            "format": "string",
            "nullable": true
          },
          "arn": {
            "title": "Arn",
            "type": "string",
            "description": "The arn code of the refund.",
            "format": "string",
            "nullable": true
          },
          "cardNumber": {
            "title": "CardNumber",
            "type": "string",
            "description": "The mask card number of the refund.",
            "format": "string",
            "nullable": true
          },
          "gatewayCode": {
            "title": "GatewayCode",
            "type": "string",
            "description": "The response code of operation",
            "format": "string",
            "nullable": true
          },
          "processingDate": {
            "title": "Processing Date Time",
            "type": "string",
            "description": "The date and time at which the refund was processed",
            "format": "string",
            "nullable": true
          },
          "channel": {
            "$ref": "#/components/schemas/PaymentsApi.ChannelEnum"
          }
        },
        "additionalProperties": false
      },
      "Queries.GetSubmerchantAccount_Result": {
        "type": "object",
        "properties": {
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Queries.GetSubmerchantAccount_Result_PaymentMethod"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Queries.GetSubmerchantAccount_Result_PaymentMethod": {
        "title": "Payment Method",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the payment method",
            "format": "string",
            "nullable": true
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The name of the payment method",
            "format": "string",
            "nullable": true
          },
          "currencies": {
            "title": "Currencies",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of currencies which this payment method supports",
            "format": "array",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payment method",
        "format": "object"
      },
      "Queries.SearchCustomers_Result": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "hasMore": {
            "type": "boolean"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.Customer"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Queries.SearchDisputes_Result": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "hasMore": {
            "type": "boolean"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Queries.SearchDisputes_SearchDisputeResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Queries.SearchDisputes_SearchDisputeResponse": {
        "title": "Dispute",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the dispute",
            "format": "string",
            "nullable": true
          },
          "createDateTime": {
            "title": "Create Date Time",
            "type": "string",
            "description": "The date and time at which the dispute was created",
            "format": "string",
            "nullable": true
          },
          "liveMode": {
            "title": "Live Mode",
            "type": "boolean",
            "description": "Whether the dispute has been created in live or test environment",
            "format": "string"
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount of the dispute.",
            "format": "string"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "The ISO currency.",
            "format": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/PaymentsApi.DisputeStatus"
          },
          "paymentId": {
            "title": "PaymentId",
            "type": "string",
            "description": "The unique identifier of the original payment",
            "format": "string",
            "nullable": true
          },
          "isOpen": {
            "title": "IsOpen",
            "type": "boolean",
            "description": "The internal status of the dispute: true if OPEN, false if CLOSED",
            "format": "bool"
          }
        },
        "additionalProperties": false,
        "description": "The dispute payload",
        "format": "object"
      },
      "Queries.SearchPayouts_Result": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "hasMore": {
            "type": "boolean"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Queries.SearchPayouts_SearchPayoutResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Queries.SearchPayouts_SearchPayoutResponse": {
        "title": "Payout",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the payout",
            "format": "string",
            "nullable": true
          },
          "accountHolder": {
            "title": "AccountHolder",
            "type": "string",
            "description": "The name of the account holder of the payout.",
            "format": "string",
            "nullable": true
          },
          "accountNumber": {
            "title": "AccountNumber",
            "type": "string",
            "description": "The account number of the payout.",
            "format": "string",
            "nullable": true
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount of the payout.",
            "format": "string"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "The ISO currency.",
            "format": "string",
            "nullable": true
          },
          "createDateTime": {
            "title": "Create Date Time",
            "type": "string",
            "description": "The date and time at which the payout was created",
            "format": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/BalancesApi.PayoutStatus"
          },
          "processorConfiguratorId": {
            "title": "ProcessorConfiguratorId",
            "type": "string",
            "description": "The processor configuration Id of the payout",
            "format": "string",
            "nullable": true
          },
          "totalNumberOfTransactions": {
            "title": "TotalNumberOfTransactions",
            "type": "integer",
            "description": "The number of transactions of the payout",
            "format": "string"
          },
          "settlementsDetail": {
            "$ref": "#/components/schemas/Queries.SearchPayouts_SettlementSearchResult"
          }
        },
        "additionalProperties": false,
        "description": "The payout payload",
        "format": "object"
      },
      "Queries.SearchPayouts_SearchSettlementResponse": {
        "title": "Settlement",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the settlement",
            "format": "string",
            "nullable": true
          },
          "createDateTime": {
            "title": "Create Date Time",
            "type": "string",
            "description": "The date and time at which the settlement was created",
            "format": "string"
          },
          "externalId": {
            "title": "ExternalId",
            "type": "string",
            "description": "The external identifier of settlement",
            "format": "string",
            "nullable": true
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount of the settlement.",
            "format": "string"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "The ISO currency.",
            "format": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/BalancesApi.PayoutDetailType"
          },
          "processorConfigurationId": {
            "title": "ProcessorConfiguratorId",
            "type": "string",
            "description": "The processor configuration Id of the settlement",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The settlement payload",
        "format": "object"
      },
      "Queries.SearchPayouts_SettlementSearchResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "hasMore": {
            "type": "boolean"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Queries.SearchPayouts_SearchSettlementResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Queries.SearchRefunds_Result": {
        "type": "object",
        "properties": {
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Queries.SearchRefunds_Result_Refund"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Queries.SearchRefunds_Result_Refund": {
        "title": "Refund",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the refund",
            "format": "string",
            "nullable": true
          },
          "liveMode": {
            "title": "Live Mode",
            "type": "boolean",
            "description": "Whether the refund has been created in live or test environment",
            "format": "string"
          },
          "createDateTime": {
            "title": "Create Date Time",
            "type": "string",
            "description": "The date and time at which the refund was created",
            "format": "string"
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount of the refund.",
            "format": "string"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "The ISO currency.",
            "format": "string",
            "nullable": true
          },
          "externalRefund": {
            "title": "External Refund",
            "type": "boolean",
            "description": "True if the refund has been executed outside the platform.",
            "format": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentsApi.RefundStatus"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "A set of key pairs associated with the refund.",
            "format": "object",
            "nullable": true
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "The description of the refund.",
            "format": "string",
            "nullable": true
          },
          "arn": {
            "title": "Arn",
            "type": "string",
            "description": "The arn code of the refund.",
            "format": "string",
            "nullable": true
          },
          "cardNumber": {
            "title": "CardNumber",
            "type": "string",
            "description": "The mask card number of the refund.",
            "format": "string",
            "nullable": true
          },
          "gatewayCode": {
            "title": "GatewayCode",
            "type": "string",
            "description": "The response code of operation",
            "format": "string",
            "nullable": true
          },
          "processingDate": {
            "title": "Processing Date Time",
            "type": "string",
            "description": "The date and time at which the refund was processed",
            "format": "string",
            "nullable": true
          },
          "channel": {
            "$ref": "#/components/schemas/PaymentsApi.ChannelEnum"
          }
        },
        "additionalProperties": false,
        "description": "The refund payload",
        "format": "object"
      },
      "Queries.SearchSubscribers_Result": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "hasMore": {
            "type": "boolean"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.Subscriber"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Queries.SearchSubscriptions_Request_Body": {
        "type": "object",
        "properties": {
          "limit": {
            "title": "Limit",
            "type": "integer",
            "description": "The maximum number of results to return. The default is 10.",
            "format": "string",
            "nullable": true
          },
          "startingAfterId": {
            "title": "StartingAfterId",
            "type": "string",
            "description": "The id of the first item in the current page of the list, used for scrolling forward.",
            "format": "string",
            "nullable": true
          },
          "endingBeforeId": {
            "title": "EndingBeforeId",
            "type": "string",
            "description": "The id of the last item in the current page of the list, used for navigating backward..",
            "format": "string",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateTo": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Queries.SearchSubscriptions_Result": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "hasMore": {
            "type": "boolean"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Common.Subscription"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Queries.SearchTransactions_Result": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "hasMore": {
            "type": "boolean"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Queries.SearchTransactions_SearchTransactionResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Queries.SearchTransactions_SearchTransactionResponse": {
        "title": "Transaction",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The unique identifier of the transaction.",
            "format": "string",
            "nullable": true
          },
          "amount": {
            "title": "Amount",
            "type": "number",
            "description": "The amount of the payout.",
            "format": "string"
          },
          "currency": {
            "title": "Currency",
            "type": "string",
            "description": "The ISO currency.",
            "format": "string",
            "nullable": true
          },
          "payoutId": {
            "title": "PayoutId",
            "type": "string",
            "description": "The unique identifier of the payout",
            "format": "string",
            "nullable": true
          },
          "referenceId": {
            "title": "ReferenceId",
            "type": "string",
            "description": "The reference id of the transaction.",
            "format": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/BalancesApi.TransactionTypes"
          },
          "dateTime": {
            "title": "DateTime",
            "type": "string",
            "description": "The date and time at which the trasaction was created.",
            "format": "string"
          },
          "feeAmount": {
            "title": "FeeAmount",
            "type": "number",
            "description": "The fee amount associated with the transaction.",
            "format": "string"
          },
          "processingDate": {
            "title": "ProcessingDate",
            "type": "string",
            "description": "The date and time at which the trasaction was processed. (if available)",
            "format": "string",
            "nullable": true
          },
          "processorConfigurationId": {
            "title": "ProcessorConfigurationId",
            "type": "string",
            "description": "The processor configuration ID associated with the transaction.",
            "format": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The transaction payload",
        "format": "object"
      },
      "SubscriptionsApi.Frequency": {
        "enum": [
          "daily",
          "weekly",
          "monthly",
          "annual"
        ],
        "type": "string"
      },
      "SubscriptionsApi.NotificationChannel": {
        "enum": [
          "sms",
          "email",
          "both"
        ],
        "type": "string"
      },
      "SubscriptionsApi.NotificationTime": {
        "enum": [
          "oneWeekBefore",
          "fiveDaysBefore",
          "threeDaysBefore",
          "doNotNotify"
        ],
        "type": "string"
      },
      "SubscriptionsApi.RecurringPaymentStatus": {
        "enum": [
          "created",
          "pending",
          "paid",
          "failed",
          "unpaid"
        ],
        "type": "string"
      },
      "SubscriptionsApi.SubscriberStatus": {
        "enum": [
          "created",
          "activated",
          "suspended",
          "pastDue",
          "canceled",
          "completed"
        ],
        "type": "string"
      }
    }
  },
  "tags": [
    {
      "name": "Account",
      "description": "Endpoint for creating and retrieving information about the submerchant **Account**."
    },
    {
      "name": "Customers",
      "description": "Endpoint for creating and retrieving **Customers**.<br />\r\nA Customer object represents a customer and a container for payment methods."
    },
    {
      "name": "Disputes",
      "description": "Endpoint for retrieving **Disputes**.<br />\r\nA dispute represents a controversy between merchant and customer about a payment. It can be in multiple states."
    },
    {
      "name": "Payments",
      "description": "Endpoint for creating and retrieving **Payments**.<br />\r\nA Payment object represents the intent to pay something, for example an order or a service. It can be charged multiple times, until successful."
    },
    {
      "name": "Payouts",
      "description": "Endpoint for retrieving **Payouts**.<br />"
    },
    {
      "name": "Refunds",
      "description": "Endpoint for creating and retrieving **Refunds**.<br />\r\nA Refund object represents the refund of a payment. Once created, the refund is executed asynchronously.<br /> \r\nIf the payment on which user wants to make a refund is related to one of more disputes, the refund cannot be done"
    },
    {
      "name": "Subscribers",
      "description": "Endpoint for creating and retrieving **Subscribers**.<br />\r\nA Subscriber object represents a customer attached to a subscription, along with the associated payment method.<br />\r\nIt will be charged on a recurring basis."
    },
    {
      "name": "Subscriptions",
      "description": "Endpoint for creating and retrieving **Subscriptions**.<br />\r\nA Subscription object is used to charge subscribers on a recurring basis."
    },
    {
      "name": "Transactions",
      "description": "Endpoint for retrieving **Transaction**.<br />\r\nA Trasaction object represents the trasaction.<br /> "
    },
    {
      "name": "Charges",
      "description": "Endpoint for creating and authorizing **Server To Server Charges**.<br />\r\nA charge object represents the transaction which will get executed against the payment gateway. If a charge has been declined, it cannot be retried."
    }
  ]
}